#include <stdio.h>

#define max 25

int main() {
    int frag[max], b[max], f[max], i, j, nb, nf, temp, lowest;
    static int bf[max], ff[max];

    printf("\nEnter the number of blocks: ");
    scanf("%d", &nb);

    printf("Enter the number of files: ");
    scanf("%d", &nf);

    printf("\nEnter the size of the blocks:\n");
    for (i = 1; i <= nb; i++) {
        printf("Block %d: ", i);
        scanf("%d", &b[i]);
        bf[i] = 0;  // Initially mark all blocks as free
    }

    printf("\nEnter the size of the files:\n");
    for (i = 1; i <= nf; i++) {
        printf("File %d: ", i);
        scanf("%d", &f[i]);
    }

    // Best Fit Allocation
    for (i = 1; i <= nf; i++) {
        lowest = 10000; // Set to a high value to find minimum fragment
        ff[i] = -1;     // Initialize file to no block assigned

        for (j = 1; j <= nb; j++) {
            if (bf[j] == 0) {  // If block is free
                temp = b[j] - f[i];
                if (temp >= 0 && temp < lowest) {
                    // Update to the best (smallest) suitable block
                    lowest = temp;
                    ff[i] = j;
                }
            }
        }

        // Allocate the file if a suitable block is found
        if (ff[i] != -1) {
            frag[i] = lowest;      // Fragmentation for file i
            bf[ff[i]] = 1;         // Mark block as occupied
        } else {
            frag[i] = -1;          // No suitable block found
        }
    }

    // Output the allocation details
    printf("\nFile No\tFile Size\tBlock No\tBlock Size\tFragment\n");
    for (i = 1; i <= nf; i++) {
        if (ff[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i, f[i], ff[i], b[ff[i]], frag[i]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i, f[i]);
        }
    }

    return 0;
}

Output:

Enter the number of blocks: 3
Enter the number of files: 2

Enter the size of the blocks:
Block 1: 5
Block 2: 2
Block 3: 7

Enter the size of the files:
File 1: 1
File 2: 4

File No File Size       Block No        Block Size      Fragment
1               1               2               2               1
2               4               1               5               1
