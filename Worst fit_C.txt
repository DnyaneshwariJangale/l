#include <stdio.h>
#include <conio.h>
#define max 25

int main() {
    int frag[max], b[max], f[max], i, j, nb, nf;
    static int bf[max], ff[max];
    
    printf("\n\tMemory Management Scheme - Worst Fit");
    
    printf("\nEnter the number of blocks: ");
    scanf("%d", &nb);
    
    printf("Enter the number of files: ");
    scanf("%d", &nf);
    
    printf("\nEnter the size of the blocks:\n");
    for (i = 1; i <= nb; i++) {
        printf("Block %d: ", i);
        scanf("%d", &b[i]);
    }
    
    printf("Enter the size of the files:\n");
    for (i = 1; i <= nf; i++) {
        printf("File %d: ", i);
        scanf("%d", &f[i]);
    }

    // Worst Fit Allocation
    for (i = 1; i <= nf; i++) {
        int largest_block_index = -1;
        int max_frag = -1;

        for (j = 1; j <= nb; j++) {
            if (bf[j] == 0) { // Block is free
                int temp = b[j] - f[i];
                if (temp >= 0 && temp > max_frag) {
                    // Update the largest block if it has a larger remaining size
                    max_frag = temp;
                    largest_block_index = j;
                }
            }
        }

        // Allocate file to the largest suitable block
        if (largest_block_index != -1) {
            ff[i] = largest_block_index;
            frag[i] = max_frag;
            bf[largest_block_index] = 1; // Mark block as filled
        }
    }
    
    printf("\nFile_no:\tFile_size:\tBlock_no:\tBlock_size:\tFragment\n");
    for (i = 1; i <= nf; i++) {
        if (ff[i] != 0) {
            printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i, f[i], ff[i], b[ff[i]], frag[i]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i, f[i]);
        }
    }
    
    getch();
}


Output:

        Memory Management Scheme - Worst Fit
Enter the number of blocks: 3
Enter the number of files: 2

Enter the size of the blocks:
Block 1: 5
Block 2: 2
Block 3: 7
Enter the size of the files:
File 1: 1
File 2: 4

File_no:        File_size:      Block_no:       Block_size:     Fragment
1               1               3               7               6
2               4               1               5               1
